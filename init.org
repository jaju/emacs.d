#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Core setup

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t; buffer-read-only: t -*-
;; This file is autogenerated and loaded. Do NOT change by hand.
;; Edit the source org-mode file (core.org) instead.

(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "English")
(defalias 'yes-or-no-p 'y-or-n-p)
(set-fringe-mode 10)
(delete-selection-mode t)

;; Initialize core emacs settings
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq-default
 initial-scratch-message ""
 initial-buffer-choice t
 tab-width 2
 indent-tabs-mode nil)

(setq
 auto-save-lis-file-prefix (expand-file-name ".auto-save-list/.saves-" *emacsd-dir*)
 bookmark-default-file (expand-file-name "bookmarks" *emacsd-dir*)
 auto-save-default t
 auto-save-timeout 20              ; save buffer every 20 seconds
 auto-save-interval 200            ; save buffer every 200 keystrokes
 backup-directory-alist `(("." . ,(expand-file-name "backups" *emacsd-dir*)))
 make-backup-files t               ; backup the first time it is saved
 vc-make-backup-files nil          ; but don't create backups of files in version control
 backup-by-copying t               ; 
 version-control t                 ; use version numbers for backed up files
 delete-old-versions t             ; delete silently older versions
 kept-old-versions 3
 kept-new-versions 6
 tab-width 2
 delete-by-moving-to-trash t)      ; use system trash

;;
(window-divider-mode 1)
(temp-buffer-resize-mode)
(setq temp-buffer-max-height 12)
(global-display-line-numbers-mode t)

(tooltip-mode -1)
(tool-bar-mode -1)

(set-face-attribute 'default nil
                    :family "Fira Code"
                    :weight 'light
                    :height 180)
(set-face-attribute 'bold nil
                    :family "Fira Code"
                    :weight 'regular)

(load-theme 'deeper-blue)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 10
      recentf-exclude '("~/.org/agenda/**"))
(require 'savehist)
(require 'server)
(unless (server-running-p)
  (server-start))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  #+END_SRC

* Package Management
#+BEGIN_SRC emacs-lisp
;; Straight package management

(defvar bootstrap-version) ; Needed. Otherwise, straight.el install fails on first run
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" *emacsd-dir*))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

(add-to-list 'load-path
             (expand-file-name "lisp" *emacsd-dir*))
(add-to-list 'custom-theme-load-path
             (expand-file-name "themes" *emacsd-dir*))

(use-package corgi-packages
  :straight (corgi-packages
             :type git
             :host github
             :repo "corgi-emacs/corgi-packages"))

(add-to-list 'straight-recipe-repositories 'corgi-packages)

(setq package-list
      '(consult                  ;
        corfu
        cape
        markdown-mode
        which-key
        mermaid-mode
        ob-mermaid
        evil
        paredit
        cider
        clojure-mode
        corgi-clojure
        hydra
        winum
        vundo
        treemacs
        treemacs-evil
        treemacs-projectile
        git-timemachine
        command-log-mode
        markdown-mode
        yaml-mode
        typescript-mode
        lsp-java
        kotlin-mode
        lsp-mode))

(dolist (package package-list)
  (straight-use-package package))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  #+END_SRC

* Completions
  
#+BEGIN_SRC emacs-lisp
;; Completions
(require 'corfu)
(setq corfu-cycle t
      corfu-auto t
      corfu-separator ?\s
      corfu-quit-at-boundary nil
      corfu-quit-no-match t
      corfu-preview-current nil
      corfu-preselect-first nil
      corfu-on-exact-match nil
      corfu-echo-documentation nil
      corfu-scroll-margin 5)
(global-corfu-mode)

;; TAB cycle if there are only a few candidates
(setq completion-cycle-threshold 5)

;; Hide commands in M-x which do not apply to the current mode
(setq read-extended-command-predicate
      #'command-completion-default-include-p)

;; Enable indentation + completion with TAB
(setq tab-always-indent 'complete)

;; cape
(require 'cape)
(add-to-list 'completion-at-point-functions 'cape-symbol)
#+END_SRC

* Clojure

#+BEGIN_SRC emacs-lisp
(let ((straight-current-profile 'corgi))
  (use-package corgi-clojure)
  (use-package corgi-emacs-lisp))

(add-hook 'clojure-mode-hook
          #'cider-mode)
(add-hook 'clojure-mode-hook
          #'enable-paredit-mode)

(corgi/enable-cider-connection-indicator)

(with-current-buffer (get-buffer-create "*scratch-clj*")
  (clojure-mode))


(when (executable-find "bb")
  (corgi/cider-jack-in-babashka))
#+END_SRC

* General Lisp Editing
#+BEGIN_SRC emacs-lisp
(use-package paredit)

(dolist (hook '(emacs-lisp-mode-hook
                eval-expression-minibuffer-setup-hook
                clojure-mode-hook
                clojurescript-mode-hook
                cider-repl-mode-hook))
  (add-hook hook #'enable-paredit-mode))
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
(require 'org)

(setq
 org-directory "~/.org"
 org-agenda-files '("~/.org/agenda")
 org-log-done t
 org-src-fontify-natively t
 org-return-follows-link t
 org-src-preserve-indentation t
 org-html-html5-fancy t
 org-src-tab-acts-natively t)

(setq
 org-todo-keywords '((sequence "TODO" "WAITING" "|" "DONE" "DELEGATED")
                     (sequence "TOSCHEDULE" "SCHEDULED" "|" "MEETING-OVER")
                     (sequence "RAW" "REFINE" "|" "IGNORED" "RECORDED")))

#+END_SRC

* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq
     treemacs-show-hidden-files t)))

(treemacs-resize-icons 22)
(treemacs-fringe-indicator-mode 'always)
(treemacs-hide-gitignored-files-mode t)
#+END_SRC
* General Shortcuts

#+BEGIN_SRC emacs-lisp
;; General shortcuts (and related custom functions)

(use-package hydra)

(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "s-z"))

(defun my/toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window (not (window-dedicated-p window))))
       "Window '%s' is dedicated"
     "Window '%s' is normal")
   (current-buffer))
  (force-window-update))

(defun my/iterm-here ()
  (interactive)
  (shell-command "open -a iTerm $PWD"))

(keymap-global-set "C-x u" #'vundo)
(keymap-global-set "M-`" #'other-window)
(keymap-global-set "M-<return>" #'toggle-frame-maximized)
(keymap-global-set "M-s-1" #'my/toggle-window-dedicated)
(keymap-global-set "C-c i" #'my/iterm-here)
(keymap-global-set "M-s-<left>" 'windmove-left)
(keymap-global-set "M-s-<right>" 'windmove-right)
(keymap-global-set "M-s-<up>" 'windmove-up)
(keymap-global-set "M-s-<down>" 'windmove-down)
(keymap-global-set "C-x C-z" 'evil-mode)
(keymap-global-set "C-c a" 'org-agenda)
(keymap-global-set "C-c l" 'org-store-link)
(keymap-global-set "C-c t" 'treemacs)

(global-set-key (kbd "s-w")
                (defhydra workspace-actions ()
                  "Workspace actions"
                  ("w" treemacs-switch-workspace "Switch workspace")
                  ("e" treemacs-edit-workspaces "Edit workspaces")
                  ("t" treemacs "Toggle treemacs")
                  ("c" ace-window "Switch to window")))

(require 'which-key)
(which-key-mode)
#+end_src
